datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum LogEvent {
  VOICE_MEMBER_DEAFENED
  VOICE_CHANNEL_LEAVE
  VOICE_CHANNEL_SWITCH
  VOICE_CHANNEL_JOIN
  VOICE_MEMBER_MUTED
  MESSAGE_UPDATED
  MESSAGE_DELETED
  MEMBER_BOOSTED
  THREAD_CREATED
  THREAD_DELETED
}

enum GlobalBanType {
  GUILD
  USER
}

enum PunishmentType {
  ALLOW_THREADS_AGAIN
  WARNING_REMOVED
  VOICE_UNDEAFEN
  WARNING_ADDED
  VOICE_UNMUTE
  VOICE_DEAFEN
  VOICE_MUTE
  NO_THREADS
  UNMUTE
  UNBAN
  KICK
  MUTE
  BAN
}

model Automod {
  blacklistedWords  String[] @map("blacklisted_words")
  omitChannels      String[] @map("omit_channels")
  messageLinks      Boolean @default(false)
  dehoisting        Boolean @default(false)
  shortlinks        Boolean @default(false)
  blacklist         Boolean @default(false)
  omitUsers         String[] @map("omit_users")
  mentions          Boolean @default(false)
  guildId           String  @map("guild_id")
  invites           Boolean @default(false)
  spam              Boolean @default(false)
  raid              Boolean @default(false)

  @@map("automod")
  @@unique([guildId])
}

model GlobalBans {
  reason String?
  issuer String
  type   GlobalBanType
  id     String

  @@map("global_bans")
  @@unique([id])
}

model Cases {
  attachments String[]
  moderatorId String  @map("moderator_id")
  message_id  String? @map("message_id")
  victimId    String  @map("victim_id")
  guildId     String
  reason      String?
  index       Int
  type        PunishmentType
  soft        Boolean
  time        Int?

  @@map("cases")
  @@unique([guildId])
}

model Guilds {
  modlogChannelId String? @map("modlog_channel_id")
  mutedRoleId     String? @map("muted_role_id")
  prefixes        String[]
  language        String
  guildId         String @map("guild_id")

  @@map("guilds")
  @@unique([guildId])
}

model Logging {
  ignoreChannels String[] @map("ignored_channels")
  ignoredUsers   String[] @map("ignored_users")
  channelId      String?  @map("channel_id")
  enabled        Boolean
  events         LogEvent[]
  guildId        String  @map("guild_id")

  @@map("logging")
  @@unique([guildId])
}

model Punishments {
  warnings Int
  guildId  String @map("guild_id")
  index    Int
  extra    Json?
  soft     Boolean
  time     String?
  type     PunishmentType

  @@map("punishments")
  @@unique([guildId, index])
}

model Users {
  prefixes        String[]
  language        String
  userId          String @map("user_id")

  @@map("users")
  @@unique([userId])
}

model Warnings {
  guildId String  @map("guild_id")
  reason  String?
  amount  Int
  userId  String  @map("user_id")

  @@map("warnings")
  @@unique([guildId, userId])
}

model Customizibility {
  webhook String?
  logging Json
  modlog  Json
  guildId String @map("guild_id")

  @@map("guild_customizibility")
  @@unique([guildId])
}
